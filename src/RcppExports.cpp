// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// glasso
arma::mat glasso(const arma::mat& mat, double lambda, int maxiter_outer, int maxiter_lasso, double tol, bool verbose);
RcppExport SEXP _bigutilsr_glasso(SEXP matSEXP, SEXP lambdaSEXP, SEXP maxiter_outerSEXP, SEXP maxiter_lassoSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter_outer(maxiter_outerSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter_lasso(maxiter_lassoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(glasso(mat, lambda, maxiter_outer, maxiter_lasso, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// solve_linear_system
Eigen::VectorXd solve_linear_system(Eigen::MatrixXd& A, const Eigen::VectorXd& b, double add_to_diag);
RcppExport SEXP _bigutilsr_solve_linear_system(SEXP ASEXP, SEXP bSEXP, SEXP add_to_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type add_to_diag(add_to_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_linear_system(A, b, add_to_diag));
    return rcpp_result_gen;
END_RCPP
}
// sum_in_temp
NumericVector& sum_in_temp(const NumericVector& x, const NumericVector& y, NumericVector& tmp_vec);
RcppExport SEXP _bigutilsr_sum_in_temp(SEXP xSEXP, SEXP ySEXP, SEXP tmp_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tmp_vec(tmp_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_in_temp(x, y, tmp_vec));
    return rcpp_result_gen;
END_RCPP
}
// sub_in_temp
NumericVector& sub_in_temp(const NumericVector& x, const NumericVector& y, NumericVector& tmp_vec);
RcppExport SEXP _bigutilsr_sub_in_temp(SEXP xSEXP, SEXP ySEXP, SEXP tmp_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tmp_vec(tmp_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(sub_in_temp(x, y, tmp_vec));
    return rcpp_result_gen;
END_RCPP
}
// scaleTau2_vector_rcpp
NumericVector scaleTau2_vector_rcpp(const NumericVector& x, NumericVector& tmp_dev, NumericVector& tmp_med);
RcppExport SEXP _bigutilsr_scaleTau2_vector_rcpp(SEXP xSEXP, SEXP tmp_devSEXP, SEXP tmp_medSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tmp_dev(tmp_devSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tmp_med(tmp_medSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleTau2_vector_rcpp(x, tmp_dev, tmp_med));
    return rcpp_result_gen;
END_RCPP
}
// dist_scaleTau2_matrix_rcpp
NumericVector dist_scaleTau2_matrix_rcpp(const NumericMatrix& Z);
RcppExport SEXP _bigutilsr_dist_scaleTau2_matrix_rcpp(SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_scaleTau2_matrix_rcpp(Z));
    return rcpp_result_gen;
END_RCPP
}
// roll_mean
NumericVector roll_mean(const NumericVector& x, const NumericVector& w);
RcppExport SEXP _bigutilsr_roll_mean(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_mean(x, w));
    return rcpp_result_gen;
END_RCPP
}
// rowSumsSq
NumericVector rowSumsSq(const NumericMatrix& source);
RcppExport SEXP _bigutilsr_rowSumsSq(SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSumsSq(source));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bigutilsr_glasso", (DL_FUNC) &_bigutilsr_glasso, 6},
    {"_bigutilsr_solve_linear_system", (DL_FUNC) &_bigutilsr_solve_linear_system, 3},
    {"_bigutilsr_sum_in_temp", (DL_FUNC) &_bigutilsr_sum_in_temp, 3},
    {"_bigutilsr_sub_in_temp", (DL_FUNC) &_bigutilsr_sub_in_temp, 3},
    {"_bigutilsr_scaleTau2_vector_rcpp", (DL_FUNC) &_bigutilsr_scaleTau2_vector_rcpp, 3},
    {"_bigutilsr_dist_scaleTau2_matrix_rcpp", (DL_FUNC) &_bigutilsr_dist_scaleTau2_matrix_rcpp, 1},
    {"_bigutilsr_roll_mean", (DL_FUNC) &_bigutilsr_roll_mean, 2},
    {"_bigutilsr_rowSumsSq", (DL_FUNC) &_bigutilsr_rowSumsSq, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bigutilsr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
